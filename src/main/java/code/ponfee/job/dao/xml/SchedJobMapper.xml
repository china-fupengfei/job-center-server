<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="code.ponfee.job.dao.mapper.SchedJobMapper">

    <sql id="baseColumns">
        id,name,cron_expression,handler,status,concurrent_support,recovery_support,score,exec_params,
        start_time,end_time,remark,is_executing,exec_time_millis,last_sched_time,last_sched_server,
        next_sched_time,creator_id,creator_name,create_time,modifier_id,modifier_name,modify_time,version
    </sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_sched_job (
            name,cron_expression,handler,status,concurrent_support,recovery_support,
            score,exec_params,start_time,end_time,next_sched_time,remark,creator_id,
            creator_name,create_time,modifier_id,modifier_name,modify_time,version
        ) VALUES (
            #{name},#{cronExpression},#{handler},#{status},#{concurrentSupport},#{recoverySupport},
            #{score},#{execParams},#{startTime},#{endTime},#{nextSchedTime},#{remark},#{creatorId},
            #{creatorName},#{createTime},#{modifierId},#{modifierName},#{modifyTime},1
        )
    </insert>

    <update id="update">
        UPDATE t_sched_job 
        SET name=#{name}, cron_expression=#{cronExpression}, handler=#{handler}, status=#{status}, 
            score=#{score}, concurrent_support=#{concurrentSupport}, recovery_support=#{recoverySupport}, 
            exec_params=#{execParams}, start_time=#{startTime}, end_time=#{endTime}, 
            next_sched_time=#{nextSchedTime}, remark=#{remark}, modifier_id=#{modifierId}, 
            modifier_name=#{modifierName}, modify_time=#{modifyTime}, version=version+1 
        WHERE id=#{id} AND version=#{version} 
    </update>

    <update id="updateStatus">
        UPDATE t_sched_job 
        SET status=#{status}, version=version+1 
        WHERE id=#{id} AND version=#{version} 
    </update>

    <delete id="delete">
        DELETE FROM t_sched_job WHERE id=#{jobId} AND version=#{version} 
    </delete>

    <select id="get" resultType="schedJob">
        SELECT <include refid="baseColumns"/> FROM t_sched_job WHERE id=#{jobId} 
    </select>

    <select id="query4list" resultType="schedJob" parameterType="map">
        SELECT <include refid="baseColumns" /> FROM t_sched_job 
        <where>
            <if test="jobId!=null">id=#{jobId}</if>
            <if test="jobName!=null">AND name LIKE '%${jobName}%'</if>
            <if test="status!=null">AND status=#{status}</if>
        </where>
        ORDER BY modify_time DESC
    </select>

    <!-- 获取job id list -->
    <select id="listJobIds" resultType="integer" parameterType="int">
        SELECT id FROM t_sched_job 
        <where>
            <if test="_parameter!=null">status=#{_parameter}</if>
        </where>
    </select>

    <!-- 尝试获取锁 -->
    <update id="tryAcquire">
        UPDATE t_sched_job 
        SET is_executing=#{isExecuting}, last_sched_time=#{lastSchedTime}, 
            last_sched_server=#{lastSchedServer}, next_sched_time=#{nextSchedTime}, 
            exec_time_millis=#{execTimeMillis}, version=version+1 
        WHERE id=#{id} AND status=1 AND version=#{version} 
        <!-- 修改：由程序来处理死锁问题（此处只能通过版本号CAS机制去竞争锁，不能用is_executing=0条件）
             AND ( concurrent_support=0 OR is_executing=0 
                   OR TIMESTAMPDIFF(HOUR,exec_time_millis,#{execTimeMillis})>3
                 ) 
        -->
    </update>

    <!-- 完成调试执行 -->
    <update id="doneExecution">
        UPDATE t_sched_job SET is_executing=0, exec_time_millis=null, version=version+1 
        WHERE id=#{id} AND is_executing=1 AND exec_time_millis=#{execTimeMillis} 
    </update>

    <!-- 收集各服务器调度负载数据 -->
    <select id="collectServersLoadBalance" resultType="map">
        SELECT last_sched_server server, SUM(score) scores FROM t_sched_job 
        WHERE is_executing=1 AND status=1 GROUP BY last_sched_server 
    </select>
</mapper>
